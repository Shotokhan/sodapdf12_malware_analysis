import sys


def search_pkcs7(data, verbose=False, min_offset=0, max_offset=10000000000000000000000000000):
    pkcs_start = b"-----BEGIN"
    pkcs_end_start = b"-----END"
    pkcs_end = b"KEY-----"
    pkcs_cert_end = b"END CERTIFICATE-----"
    tmp_data = data
    dumped = []
    already_seen = set()
    offset = 0
    while True:
        try:
            low = tmp_data.index(pkcs_start)
            offset += low
            if not (min_offset <= offset <= max_offset):
                break
            mid = tmp_data.index(pkcs_end_start)
            high = 1000000000000000000000000000000000000000
            if pkcs_end in tmp_data:
                high_offset = tmp_data[mid:].index(pkcs_end) + len(pkcs_end)
                high = min(mid + high_offset, high)
            if pkcs_cert_end in tmp_data:
                high = min(tmp_data.index(pkcs_cert_end) + len(pkcs_cert_end), high)
            pkcs_data = tmp_data[low:high]
            if len(pkcs_data) > 0 and b'\x00' not in pkcs_data and pkcs_data not in already_seen:
                if verbose:
                    print(f"Offset: {offset}")
                dumped.append(pkcs_data)
                already_seen.add(pkcs_data)
            tmp_data = tmp_data[high:]
            offset += (high - low)
        except ValueError:
            break
    return dumped


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <filename>")
        exit(1)
    filename = sys.argv[1]
    with open(filename, 'rb') as f:
        data = f.read()
    # dumped = search_pkcs7(data, verbose=True, max_offset=14000000)
    dumped = search_pkcs7(data, verbose=True)
    for i in range(len(dumped)):
        dump = dumped[i]
        if b'CERTIFICATE' in dump:
            with open(f"certificate_{i}.pem", 'wb') as f:
                f.write(dump)
        elif b'PRIVATE' in dump:
            with open(f"private_{i}.pem", 'wb') as f:
                f.write(dump)
        elif b'PUBLIC' in dump:
            with open(f"public_{i}.pem", 'wb') as f:
                f.write(dump)
        else:
            with open(f"other_{i}.pem", 'wb') as f:
                f.write(dump)            
    print(f"Dumped {len(dumped)} keys")
